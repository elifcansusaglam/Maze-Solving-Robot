# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from yocs_msgs/ARPair.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ARPair(genpy.Message):
  _md5sum = "9a0e51fbcb2eab37a945707af8ee9a6b"
  _type = "yocs_msgs/ARPair"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int16  left_id
int16  right_id
float32 baseline
float32 target_offset
string  target_frame
"""
  __slots__ = ['left_id','right_id','baseline','target_offset','target_frame']
  _slot_types = ['int16','int16','float32','float32','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       left_id,right_id,baseline,target_offset,target_frame

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ARPair, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.left_id is None:
        self.left_id = 0
      if self.right_id is None:
        self.right_id = 0
      if self.baseline is None:
        self.baseline = 0.
      if self.target_offset is None:
        self.target_offset = 0.
      if self.target_frame is None:
        self.target_frame = ''
    else:
      self.left_id = 0
      self.right_id = 0
      self.baseline = 0.
      self.target_offset = 0.
      self.target_frame = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2h2f().pack(_x.left_id, _x.right_id, _x.baseline, _x.target_offset))
      _x = self.target_frame
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 12
      (_x.left_id, _x.right_id, _x.baseline, _x.target_offset,) = _get_struct_2h2f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.target_frame = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.target_frame = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2h2f().pack(_x.left_id, _x.right_id, _x.baseline, _x.target_offset))
      _x = self.target_frame
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 12
      (_x.left_id, _x.right_id, _x.baseline, _x.target_offset,) = _get_struct_2h2f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.target_frame = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.target_frame = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2h2f = None
def _get_struct_2h2f():
    global _struct_2h2f
    if _struct_2h2f is None:
        _struct_2h2f = struct.Struct("<2h2f")
    return _struct_2h2f
