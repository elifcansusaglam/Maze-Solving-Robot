// Auto-generated. Do not edit!

// (in-package yocs_msgs.msg)


"use strict";

const _serializer = _ros_msg_utils.Serialize;
const _arraySerializer = _serializer.Array;
const _deserializer = _ros_msg_utils.Deserialize;
const _arrayDeserializer = _deserializer.Array;
const _finder = _ros_msg_utils.Find;
const _getByteLength = _ros_msg_utils.getByteLength;

//-----------------------------------------------------------

class NavigateToGoal {
  constructor(initObj={}) {
    if (initObj === null) {
      // initObj === null is a special case for deserialization where we don't initialize fields
      this.location = null;
      this.approach_type = null;
      this.num_retry = null;
      this.timeout = null;
      this.distance = null;
    }
    else {
      if (initObj.hasOwnProperty('location')) {
        this.location = initObj.location
      }
      else {
        this.location = '';
      }
      if (initObj.hasOwnProperty('approach_type')) {
        this.approach_type = initObj.approach_type
      }
      else {
        this.approach_type = 0;
      }
      if (initObj.hasOwnProperty('num_retry')) {
        this.num_retry = initObj.num_retry
      }
      else {
        this.num_retry = 0;
      }
      if (initObj.hasOwnProperty('timeout')) {
        this.timeout = initObj.timeout
      }
      else {
        this.timeout = 0.0;
      }
      if (initObj.hasOwnProperty('distance')) {
        this.distance = initObj.distance
      }
      else {
        this.distance = 0.0;
      }
    }
  }

  static serialize(obj, buffer, bufferOffset) {
    // Serializes a message object of type NavigateToGoal
    // Serialize message field [location]
    bufferOffset = _serializer.string(obj.location, buffer, bufferOffset);
    // Serialize message field [approach_type]
    bufferOffset = _serializer.int8(obj.approach_type, buffer, bufferOffset);
    // Serialize message field [num_retry]
    bufferOffset = _serializer.int8(obj.num_retry, buffer, bufferOffset);
    // Serialize message field [timeout]
    bufferOffset = _serializer.float32(obj.timeout, buffer, bufferOffset);
    // Serialize message field [distance]
    bufferOffset = _serializer.float32(obj.distance, buffer, bufferOffset);
    return bufferOffset;
  }

  static deserialize(buffer, bufferOffset=[0]) {
    //deserializes a message object of type NavigateToGoal
    let len;
    let data = new NavigateToGoal(null);
    // Deserialize message field [location]
    data.location = _deserializer.string(buffer, bufferOffset);
    // Deserialize message field [approach_type]
    data.approach_type = _deserializer.int8(buffer, bufferOffset);
    // Deserialize message field [num_retry]
    data.num_retry = _deserializer.int8(buffer, bufferOffset);
    // Deserialize message field [timeout]
    data.timeout = _deserializer.float32(buffer, bufferOffset);
    // Deserialize message field [distance]
    data.distance = _deserializer.float32(buffer, bufferOffset);
    return data;
  }

  static getMessageSize(object) {
    let length = 0;
    length += object.location.length;
    return length + 14;
  }

  static datatype() {
    // Returns string type for a message object
    return 'yocs_msgs/NavigateToGoal';
  }

  static md5sum() {
    //Returns md5sum for a message object
    return '1549bb00469af4886dd492a95637d796';
  }

  static messageDefinition() {
    // Returns full string definition for message
    return `
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    # Goal
    string location
    int8   approach_type
    int8   num_retry
    float32 timeout
    
    # This variable used when approach near is requested
    float32 distance
    
    int8 APPROACH_NEAR = 11
    int8 APPROACH_ON   = 12
    
    `;
  }

  static Resolve(msg) {
    // deep-construct a valid message object instance of whatever was passed in
    if (typeof msg !== 'object' || msg === null) {
      msg = {};
    }
    const resolved = new NavigateToGoal(null);
    if (msg.location !== undefined) {
      resolved.location = msg.location;
    }
    else {
      resolved.location = ''
    }

    if (msg.approach_type !== undefined) {
      resolved.approach_type = msg.approach_type;
    }
    else {
      resolved.approach_type = 0
    }

    if (msg.num_retry !== undefined) {
      resolved.num_retry = msg.num_retry;
    }
    else {
      resolved.num_retry = 0
    }

    if (msg.timeout !== undefined) {
      resolved.timeout = msg.timeout;
    }
    else {
      resolved.timeout = 0.0
    }

    if (msg.distance !== undefined) {
      resolved.distance = msg.distance;
    }
    else {
      resolved.distance = 0.0
    }

    return resolved;
    }
};

// Constants for message
NavigateToGoal.Constants = {
  APPROACH_NEAR: 11,
  APPROACH_ON: 12,
}

module.exports = NavigateToGoal;
